---
interface Props {
  title: string;
  description: string;
  type?: 'website' | 'article';
  image?: string;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  keywords?: string;
  breadcrumbs?: Array<{ name: string; url: string }>;
  faqItems?: Array<{ question: string; answer: string }>;
  itemList?: Array<{ name: string; url: string; description: string }>;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description,
  type = 'website',
  image = '/og-image.svg', // Note: Convert to PNG (1200x630) for better social media compatibility
  publishedTime,
  modifiedTime,
  author = 'Still Natty',
  keywords = 'natty or not, peptides, natural bodybuilding, performance enhancement, BPC-157, semaglutide, therapeutic peptides, fitness supplements, natty status',
  breadcrumbs,
  faqItems,
  itemList
} = Astro.props;

const imageURL = new URL(image, Astro.site);

// Build JSON-LD structured data
const websiteSchema = {
  '@context': 'https://schema.org',
  '@type': 'WebSite',
  name: 'Still Natty',
  description: 'Your guide to peptides and natty or not classification for natural performance optimization',
  url: Astro.site
};

// Organization schema
const organizationSchema = {
  '@context': 'https://schema.org',
  '@type': 'Organization',
  name: 'Still Natty',
  description: 'Your guide to peptides and natty or not classification',
  url: Astro.site,
  logo: {
    '@type': 'ImageObject',
    url: new URL('/favicon.svg', Astro.site).toString()
  }
};

const articleSchema = type === 'article' && publishedTime ? {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: title,
  description: description,
  image: imageURL.toString(),
  datePublished: publishedTime,
  dateModified: modifiedTime || publishedTime,
  author: {
    '@type': 'Person',
    name: author
  },
  publisher: {
    '@type': 'Organization',
    name: 'Still Natty',
    logo: {
      '@type': 'ImageObject',
      url: new URL('/favicon.svg', Astro.site).toString()
    }
  }
} : null;

// BreadcrumbList schema
const breadcrumbSchema = breadcrumbs ? {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: breadcrumbs.map((crumb, index) => ({
    '@type': 'ListItem',
    position: index + 1,
    name: crumb.name,
    item: new URL(crumb.url, Astro.site).toString()
  }))
} : null;

// FAQPage schema
const faqSchema = faqItems && faqItems.length > 0 ? {
  '@context': 'https://schema.org',
  '@type': 'FAQPage',
  mainEntity: faqItems.map(item => ({
    '@type': 'Question',
    name: item.question,
    acceptedAnswer: {
      '@type': 'Answer',
      text: item.answer
    }
  }))
} : null;

// ItemList schema for homepage peptide listings
const itemListSchema = itemList && itemList.length > 0 ? {
  '@context': 'https://schema.org',
  '@type': 'ItemList',
  itemListElement: itemList.map((item, index) => ({
    '@type': 'ListItem',
    position: index + 1,
    name: item.name,
    url: new URL(item.url, Astro.site).toString(),
    description: item.description
  }))
} : null;
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="keywords" content={keywords} />
<link rel="canonical" href={canonicalURL} />
<meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
<meta name="language" content="English" />
<meta name="author" content={author} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageURL} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:site_name" content="Still Natty" />
<meta property="og:locale" content="en_US" />
{publishedTime && <meta property="article:published_time" content={publishedTime} />}
{modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
{author && <meta property="article:author" content={author} />}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={canonicalURL} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={imageURL} />
<meta name="twitter:site" content="@stillnatty" />
<meta name="twitter:creator" content="@stillnatty" />

<!-- JSON-LD Structured Data -->
{type === 'website' && (
  <script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />
)}
<script type="application/ld+json" set:html={JSON.stringify(organizationSchema)} />
{articleSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(articleSchema)} />
)}
{breadcrumbSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
)}
{faqSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(faqSchema)} />
)}
{itemListSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(itemListSchema)} />
)}
